export type StriverProblem = {
  title: string;
  difficulty: "Easy" | "Medium" | "Hard";
};
export type StriverSheetType = {
  [topic: string]: StriverProblem[];
};

export const StriverSheet: StriverSheetType = {
  Tries: [
    { title: "Implement TRIE | INSERT | SEARCH | STARTSWITH", difficulty: "Hard" },
    { title: "Implement Trie - 2 (Prefix Tree)", difficulty: "Hard" },
    { title: "Longest String with All Prefixes", difficulty: "Medium" },
    { title: "Number of Distinct Substrings in a String", difficulty: "Hard" },
    { title: "Bit PreRequisites for TRIE Problems", difficulty: "Hard" },
    { title: "Maximum XOR of two numbers in an array", difficulty: "Medium" },
    { title: "Maximum XOR With an Element From Array", difficulty: "Hard" },
  ],
  DP: [
    { title: "Fibonacci Number", difficulty: "Easy" },
    { title: "Climbing Stars", difficulty: "Medium" },
    { title: "Frog Jump(DP-3)", difficulty: "Medium" },
    { title: "Frog Jump with k distances(DP-4)", difficulty: "Medium" },
    { title: "Maximum sum of non-adjacent elements (DP 5)", difficulty: "Medium" },
    { title: "House Robber (DP 6)", difficulty: "Medium" },
    { title: "Ninja's Training (DP 7)", difficulty: "Medium" },
    { title: "Grid Unique Paths : DP on Grids (DP8)", difficulty: "Medium" },
    { title: "Grid Unique Paths 2 (DP 9)", difficulty: "Medium" },
    { title: "Minimum path sum in Grid", difficulty: "Medium" },
    { title: "Minimum path sum in Triangular Grid (DP 11)", difficulty: "Medium" },
    { title: "Minimum/Maximum Falling Path Sum (DP-12)", difficulty: "Medium" },
    { title: "3-d DP : Ninja and his friends", difficulty: "Medium" },

    { title: "Subset sum equal to target", difficulty: "Medium" },
    { title: "Partition Equal Subset Sum", difficulty: "Medium" },
    { title: "Partition Set Into 2 Subsets With Min Absolute Sum Diff", difficulty: "Medium" },
    { title: "Count Subsets with Sum K", difficulty: "Medium" },
    { title: "Count Partitions with Given Difference", difficulty: "Medium" },
    { title: "Assign Cookies", difficulty: "Hard" },
    { title: "Minimum Coins", difficulty: "Hard" },
    { title: "Target Sum", difficulty: "Medium" },
    { title: "Coin Change 2", difficulty: "Hard" },
    { title: "Unbounded Knapsack", difficulty: "Hard" },
    { title: "Rod Cutting Problem ", difficulty: "Hard" },

    { title: "Longest Common Subsequence", difficulty: "Hard" },
    { title: "Print Longest Common Subsequence", difficulty: "Hard" },
    { title: "Longest Common Substring", difficulty: "Hard" },
    { title: "Longest Palindromic Subsequence", difficulty: "Hard" },
    { title: "Minimum insertions to make string palindrome", difficulty: "Hard" },
    { title: "Minimum Insertions/Deletions to Convert String", difficulty: "Hard" },
    { title: "Shortest Common Supersequence", difficulty: "Hard" },
    { title: "Distinct Subsequences", difficulty: "Medium" },
    { title: "Edit Distance", difficulty: "Hard" },
    { title: "Wildcard Matching", difficulty: "Medium" },

    { title: "Best Time to Buy and Sell Stock", difficulty: "Hard" },
    { title: "Buy and Sell Stock - II", difficulty: "Hard" },
    { title: "Buy and Sell Stocks III", difficulty: "Hard" },
    { title: "Buy and Stock Sell IV ", difficulty: "Hard" },
    { title: "Buy and Sell Stocks With Cooldown", difficulty: "Hard" },
    { title: "Buy and Sell Stocks With Transaction Fee", difficulty: "Hard" },

    { title: "Longest Increasing Subsequence", difficulty: "Hard" },
    { title: "Printing Longest Increasing Subsequence", difficulty: "Hard" },
    { title: "Longest Increasing Subsequence", difficulty: "Hard" },
    { title: "Largest Divisible Subset", difficulty: "Hard" },
    { title: "Longest String Chain", difficulty: "Hard" },
    { title: "Longest Bitonic Subsequence", difficulty: "Hard" },
    { title: "Number of Longest Increasing Subsequences", difficulty: "Hard" },

    { title: "Matrix Chain Multiplication", difficulty: "Hard" },
    { title: "Matrix Chain Multiplication | Bottom-Up", difficulty: "Hard" },
    { title: "Minimum Cost to Cut the Stick", difficulty: "Hard" },
    { title: "Burst Balloons", difficulty: "Hard" },
    { title: "Evaluate Boolean Expression to True", difficulty: "Hard" },
    { title: "Palindrome Partitioning - II", difficulty: "Hard" },
    { title: "Partition Array for Maximum Sum", difficulty: "Hard" },

    { title: "Maximum Rectangle Area with all 1's|", difficulty: "Hard" },
    { title: "Count Square Submatrices with All Ones", difficulty: "Hard" },
  ],
  Graphs: [
    { title: "Graph Representation ", difficulty: "Easy" },
    { title: "Breadth First Search (BFS)", difficulty: "Medium" },
    { title: "Depth First Search (DFS)", difficulty: "Medium" },
    { title: "Number of provinces", difficulty: "Medium" },
    { title: "Connected Components Problem in Matrix", difficulty: "Hard" },
    { title: "Rotten Oranges", difficulty: "Medium" },
    { title: "Flood fill", difficulty: "Hard" },
    { title: "Cycle Detection in unirected Graph", difficulty: "Hard" },
    { title: "Cycle Detection in undirected ", difficulty: "Hard" },
    { title: "0/1 Matrix (Bfs Problem)", difficulty: "Medium" },
    { title: "Surrounded Regions (dfs)", difficulty: "Hard" },
    { title: "Number of Enclaves [flood fill implementation - multisource]", difficulty: "Hard" },
    { title: "Word ladder - 1", difficulty: "Hard" },

    { title: "Word ladder - 2", difficulty: "Hard" },
    { title: "Number of Distinct Islands", difficulty: "Hard" },
    { title: "Bipartite Graph (DFS)", difficulty: "Medium" },
    { title: "Cycle Detection in Directed Graph (DFS)", difficulty: "Hard" },
    { title: "Topo Sort", difficulty: "Hard" },
    { title: "Kahn's Algorithm", difficulty: "Hard" },
    { title: "Cycle Detection in Directed Graph (BFS)", difficulty: "Hard" },
    { title: "Course Schedule - I", difficulty: "Hard" },
    { title: "Course Schedule - II", difficulty: "Hard" },
    { title: "Find eventual safe states", difficulty: "Hard" },
    { title: "Alien dictionary", difficulty: "Hard" },

    { title: "Shortest Path in UG with unit weights", difficulty: "Hard" },
    { title: "Shortest Path in DAG", difficulty: "Hard" },
    { title: "Djisktra's Algorithm", difficulty: "Hard" },
    { title: "Shortest path in a binary maze", difficulty: "Medium" },
    { title: "Path with minimum effort", difficulty: "Medium" },
    { title: "Cheapest flights within k stops", difficulty: "Hard" },
    { title: "Network Delay time", difficulty: "Medium" },
    { title: "Number of ways to arrive at destination", difficulty: "Medium" },
    { title: "Minimum steps to reach end from start by performing multiplication and mod operations with array elements", difficulty: "Hard" },
    { title: "Bellman Ford Algorithm", difficulty: "Hard" },

    { title: "Floyd Warshal Algorithm", difficulty: "Hard" },
    { title: "Find the city with the smallest number of neighbors in a threshold distance", difficulty: "Hard" },
    { title: "Minimum Spanning Tree", difficulty: "Hard" },
    { title: "Prim's Algorithm", difficulty: "Hard" },
    { title: "Disjoint Set [Union by Rank]", difficulty: "Hard" },
    { title: "Disjoint Set [Union by Size]", difficulty: "Hard" },

    { title: "Kruskal's Algorithm", difficulty: "Hard" },
    { title: "Number of operations to make network connected", difficulty: "Medium" },
    { title: "Most stones removed with same rows or columns", difficulty: "Medium" },
    { title: "Accounts merge", difficulty: "Hard" },
    { title: "Number of island II", difficulty: "Hard" },
    { title: "Making a Large Island", difficulty: "Hard" },
    { title: "Swim in rising water", difficulty: "Hard" },

    { title: "Bridges in Graph", difficulty: "Hard" },
    { title: "Articulation Point", difficulty: "Hard" },
    { title: "Kosaraju's Algorithm", difficulty: "Hard" },
  ],
  BinarySearchTrees: [
    { title: "Search in a Binary Search Tree", difficulty: "Easy" },
    { title: "Find Min/Max in BST", difficulty: "Medium" },
    { title: "Ceil in a Binary Search Tree", difficulty: "Easy" },
    { title: "Floor in a Binary Search Tree", difficulty: "Easy" },
    { title: "Insert a given Node in Binary Search Tree", difficulty: "Easy" },
    { title: "Delete a Node in Binary Search Tree", difficulty: "Medium" },
    { title: "Find K-th smallest/largest element in BST", difficulty: "Medium" },
    { title: "Check if a tree is a BST or BT", difficulty: "Medium" },
    { title: "LCA in Binary Search Tree", difficulty: "Medium" },
    { title: "Construct a BST from a preorder traversal", difficulty: "Medium" },
    { title: "Inorder Successor/Predecessor in BST", difficulty: "Medium" },
    { title: "Merge 2 BST's", difficulty: "Hard" },
    { title: "Two Sum In BST | Check if there exists a pair with Sum K", difficulty: "Medium" },
    { title: "Recover BST | Correct BST with two nodes swapped", difficulty: "Hard" },
    { title: "Largest BST in Binary Tree", difficulty: "Hard" },
  ],
  BinaryTrees: [
    { title: "Binary Tree Traversals in Binary Tree", difficulty: "Easy" },
    { title: "Preorder , Postorder and Inorder Traversal of Binary Tree using recursion", difficulty: "Medium" },
    { title: "Preorder , Postorder and Inorder Traversal of Binary Tree using iteration", difficulty: "Easy" },
    { title: "Level order Traversal / Level order traversal in spiral form", difficulty: "Easy" },
    { title: "Post-order Traversal of Binary Tree using 2 stack", difficulty: "Easy" },
    { title: "Post-order Traversal of Binary Tree using 1 stack", difficulty: "Medium" },
    { title: "Preorder, Inorder, and Postorder Traversal in one Traversal", difficulty: "Medium" },
    { title: "Height of a Binary Tree", difficulty: "Medium" },
    { title: "Check if the Binary tree is height-balanced or not", difficulty: "Medium" },
    { title: "Diameter of Binary Tree", difficulty: "Medium" },
    { title: "Maximum path sum", difficulty: "Hard" },
    { title: "Check if two trees are identical or not", difficulty: "Medium" },
    { title: "Zig Zag Traversal of Binary Tree", difficulty: "Easy" },
    { title: "Boundary Traversal of Binary Tree", difficulty: "Medium" },
    { title: "Vertical Order Traversal of Binary Tree", difficulty: "Easy" },
    { title: "Top View of Binary Tree", difficulty: "Easy" },
    { title: "Bottom View of Binary Tree", difficulty: "Medium" },
    { title: "Right/Left View of Binary Tree", difficulty: "Medium" },
    { title: "Symmetric Binary Tree", difficulty: "Medium" },

    { title: "Root to Node Path in Binary Tree", difficulty: "Medium" },
    { title: "LCA in Binary Tree", difficulty: "Medium" },
    { title: "Maximum width of a Binary Tree", difficulty: "Medium" },
    { title: "Check for Children Sum Property", difficulty: "Hard" },
    { title: "Print all the Nodes at a distance of K in a Binary Tree", difficulty: "Medium" },
    { title: "Minimum time taken to BURN the Binary Tree from a Node", difficulty: "Hard" },
    { title: "Count total Nodes in a COMPLETE Binary Tree", difficulty: "Medium" },
    { title: "Construct Binary Tree from inorder and preorder", difficulty: "Hard" },
    { title: "Construct the Binary Tree from Postorder and Inorder Traversal", difficulty: "Hard" },
    { title: "Serialize and deserialize Binary Tree", difficulty: "Hard" },
    { title: "Morris Preorder Traversal of a Binary Tree", difficulty: "Medium" },
    { title: "Morris Inorder Traversal of a Binary Tree", difficulty: "Medium" },
    { title: "Flatten Binary Tree to LinkedList", difficulty: "Hard" },
  ],
  Greedy: [
    { title: "Assign Cookies", difficulty: "Easy" },
    { title: "Fractional Knapsack Problem", difficulty: "Medium" },
    { title: "Greedy algorithm to find minimum number of coins", difficulty: "Medium" },
    { title: "Lemonade Change", difficulty: "Easy" },
    { title: "Valid Paranthesis Checker", difficulty: "Medium" },
    { title: "N meetings in one room", difficulty: "Medium" },
    { title: "Jump Game", difficulty: "Medium" },
    { title: "Jump Game 2", difficulty: "Hard" },
    { title: "Minimum number of platforms required for a railway", difficulty: "Medium" },
    { title: "Job sequencing Problem", difficulty: "Medium" },
    { title: "Candy", difficulty: "Hard" },
    { title: "Program for Shortest Job First (or SJF) CPU Scheduling", difficulty: "Medium" },
    { title: "Program for Least Recently Used (LRU) Page Replacement Algorithm", difficulty: "Medium" },
    { title: "Insert Interval", difficulty: "Medium" },
    { title: "Merge Intervals", difficulty: "Medium" },
    { title: "Non-overlapping Intervals", difficulty: "Medium" },
  ],
  Heap: [
    { title: "Min Heap and Max Heap Implementation", difficulty: "Medium" },
    { title: "Check if an array represents a min-heap or not", difficulty: "Medium" },
    { title: "Convert min Heap to max Heap", difficulty: "Medium" },
    { title: "Kth largest element in an array [use priority queue]", difficulty: "Easy" },
    { title: "Kth smallest element in an array [use priority queue]", difficulty: "Easy" },
    { title: "Sort K sorted array", difficulty: "Easy" },
    { title: "Merge M sorted Lists", difficulty: "Hard" },
    { title: "Replace each array element by its corresponding rank", difficulty: "Easy" },
    { title: "Task Scheduler", difficulty: "Medium" },
    { title: "Hands of Straights", difficulty: "Medium" },
    { title: "Design twitter", difficulty: "Medium" },
    { title: "Connect `n` ropes with minimal cost", difficulty: "Medium" },
    { title: "Kth largest element in a stream of running integers", difficulty: "Easy" },
    { title: "Maximum Sum Combination", difficulty: "Medium" },
    { title: "Find Median from Data Stream", difficulty: "Hard" },
    { title: "K most frequent elements", difficulty: "Medium" },
  ],
  SlidingWindowAndTwoPointers: [
    { title: "Longest Substring Without Repeating Characters", difficulty: "Medium" },
    { title: "Max Consecutive Ones III", difficulty: "Medium" },
    { title: "Fruit Into Baskets", difficulty: "Medium" },
    { title: "longest repeating character replacement", difficulty: "Easy" },
    { title: "Kth smallest element in an array [use priority queue]", difficulty: "Medium" },
    { title: "Binary subarray with sum", difficulty: "Easy" },
    { title: "Count number of nice subarrays", difficulty: "Medium" },
    { title: "Number of substring containing all three characters", difficulty: "Medium" },
    { title: "Maximum point you can obtain from cards", difficulty: "Medium" },
    { title: "Longest Substring with At Most K Distinct Characters", difficulty: "Medium" },
    { title: "Subarray with k different integers", difficulty: "Hard" },
    { title: "Minimum Window Substring", difficulty: "Hard" },
    { title: "Minimum Window Subsequence", difficulty: "Hard" },
  ],
  StackandQueue: [
    { title: "Implement Stack using Arrays,Queue and LinkedList", difficulty: "Medium" },
    { title: "Implement Queue using Arrays,Queue and LinkedList", difficulty: "Medium" },
    { title: "Check for balanced paranthesis", difficulty: "Medium" },
    { title: "Implement Min Stack", difficulty: "Medium" },
    { title: "Infix to Postfix Conversion using Stack", difficulty: "Medium" },
    { title: "Prefix to Infix Conversion", difficulty: "Medium" },
    { title: "Prefix to Postfix Conversion", difficulty: "Medium" },
    { title: "Postfix to Prefix Conversion", difficulty: "Medium" },
    { title: "Postfix to Infix", difficulty: "Medium" },
    { title: "Convert Infix To Prefix Notation", difficulty: "Medium" },
    { title: "Next Greater Element", difficulty: "Easy" },
    { title: "Next Greater Element 2", difficulty: "Medium" },
    { title: "Next Smaller Element", difficulty: "Hard" },

    { title: "Number of NGEs to the right", difficulty: "Easy" },
    { title: "Trapping Rainwater", difficulty: "Hard" },
    { title: "Sum of subarray minimum", difficulty: "Medium" },
    { title: "Asteroid Collision", difficulty: "Medium" },
    { title: "Sum of subarray ranges", difficulty: "Medium" },
    { title: "Remove k Digits", difficulty: "Medium" },
    { title: "Largest rectangle in a histogram", difficulty: "Medium" },
    { title: "Maximal Rectangles", difficulty: "Hard" },
  ],
  Recursion: [
    { title: "Recursive Implementation of atoi()", difficulty: "Hard" },
    { title: "Pow(x, n)", difficulty: "Medium" },
    { title: "Count Good numbers", difficulty: "Easy" },
    { title: "Sort a stack using recursion", difficulty: "Medium" },
    { title: "Reverse a stack using recursion", difficulty: "Easy" },
    { title: "Generate all binary strings", difficulty: "Medium" },
    { title: "Generate Paranthesis", difficulty: "Medium" },
    { title: "Print all subsequences/Power Set", difficulty: "Medium" },
    { title: "Count all subsequences with sum K", difficulty: "Hard" },
    { title: "Check if there exists a subsequence with sum K", difficulty: "Medium" },
    { title: "Combination Sum", difficulty: "Medium" },
    { title: "Combination Sum-II", difficulty: "Medium" },
    { title: "Subset Sum-I", difficulty: "Medium" },
    { title: "Subset Sum-II", difficulty: "Medium" },
    { title: "Combination Sum - III", difficulty: "Hard" },
    { title: "Letter Combinations of a Phone number", difficulty: "Medium" },

    { title: "Palindrome Partitioning", difficulty: "Medium" },
    { title: "Word Search", difficulty: "Medium" },
    { title: "N Queen", difficulty: "Hard" },
    { title: "Rat in a Maze", difficulty: "Hard" },
    { title: "Word Break", difficulty: "Hard" },
    { title: "M Coloring Problem", difficulty: "Hard" },
    { title: "Sudoko Solver", difficulty: "Hard" },
    { title: "Expression Add Operators", difficulty: "Hard" },
  ],
  LinkedList: [
    { title: "Insert , Delete a node in DLL", difficulty: "Easy" },
    { title: "Reverse a DLL", difficulty: "Medium" },
    { title: "Middle of a LinkedList [TortoiseHare Method]", difficulty: "Easy" },
    { title: "Reverse a LinkedList [Iterative] and Recursive", difficulty: "Easy" },
    { title: "Detect a loop in LL", difficulty: "Medium" },
    { title: "Find the starting point in LL", difficulty: "Medium" },
    { title: "Length of Loop in LL", difficulty: "Easy" },
    { title: "Check if LL is palindrome or not", difficulty: "Medium" },
    { title: "Segrregate odd and even nodes in LL", difficulty: "Medium" },
    { title: "Remove Nth node from the back of the LL", difficulty: "Medium" },
    { title: "Delete the middle node of LL", difficulty: "Medium" },
    { title: "Sort LL", difficulty: "Medium" },
    { title: "Sort a LL of 0's 1's and 2's by changing links", difficulty: "Medium" },
    { title: "Find the intersection point of Y LL", difficulty: "Medium" },
    { title: "Add 1 to a number represented by LL", difficulty: "Medium" },
    { title: "Add 2 numbers in LL", difficulty: "Medium" },

    { title: "Delete all occurrences of a key in DLL", difficulty: "Medium" },
    { title: "Find pairs with given sum in DLL", difficulty: "Medium" },
    { title: "Remove duplicates from sorted DLL", difficulty: "Medium" },
    { title: "Reverse LL in group of given size K", difficulty: "Hard" },
    { title: "Rotate a LL", difficulty: "Medium" },
    { title: "Flattening of LL", difficulty: "Hard" },
    { title: "Clone a Linked List with random and next pointer", difficulty: "Hard" },
  ],
  Strings: [
    { title: "Remove outermost Paranthesis", difficulty: "Easy" },
    { title: "Reverse words in a given string / Palindrome Check", difficulty: "Easy" },
    { title: "Largest odd number in a string", difficulty: "Easy" },
    { title: "Longest Common Prefix", difficulty: "Easy" },
    { title: "Isomorphic String", difficulty: "Easy" },
    { title: "check whether one string is a rotation of another", difficulty: "Medium" },
    { title: "Check if two strings are anagram of each other", difficulty: "Medium" },
    { title: "Sort Characters by frequency", difficulty: "Easy" },
    { title: "Maximum Nesting Depth of Paranthesis", difficulty: "Easy" },
    { title: "Roman Number to Integer and vice versa", difficulty: "Easy" },
    { title: "Implement Atoi", difficulty: "Medium" },
    { title: "Count Number of Substrings", difficulty: "Medium" },
    { title: "Longest Palindromic Substring[Do it without DP]", difficulty: "Medium" },
    { title: "Sum of Beauty of all substring", difficulty: "Medium" },
    { title: "Reverse Every Word in A String", difficulty: "Medium" },
    { title: "Minimum number of bracket reversals needed to make an expression balanced", difficulty: "Medium" },

    { title: "Count and say", difficulty: "Medium" },
    { title: "Rabin Karp", difficulty: "Hard" },
    { title: "Z-Function", difficulty: "Easy" },
    { title: "KMP algo / LPS(pi) array", difficulty: "Hard" },
    { title: "Shortest Palindrome", difficulty: "Hard" },
    { title: "Longest happy prefix", difficulty: "Hard" },
    { title: "Count palindromic subsequence in given string", difficulty: "Hard" },
  ],
  BinarySearch: [
    { title: "Binary Search to find X in sorted array", difficulty: "Easy" },
    { title: "Implement Lower and Upper Bound", difficulty: "Easy" },
    { title: "Search Insert Position", difficulty: "Easy" },
    { title: "Floor/Ceil in Sorted Array", difficulty: "Medium" },
    { title: "Find the first or last occurrence of a given number in a sorted array", difficulty: "Easy" },
    { title: "Count occurrences of a number in a sorted array with duplicates", difficulty: "Easy" },
    { title: "Search in Rotated Sorted Array I", difficulty: "Medium" },
    { title: "Search in Rotated Sorted Array II", difficulty: "Medium" },
    { title: "Find minimum in Rotated Sorted Array", difficulty: "Medium" },
    { title: "Find out how many times has an array been rotated Solve", difficulty: "Easy" },
    { title: "Single element in a Sorted Array", difficulty: "Easy" },
    { title: "Find peak element", difficulty: "Hard" },
    { title: "Find square root of a number in log n", difficulty: "Medium" },
    { title: "Find the Nth root of a number using binary search", difficulty: "Medium" },
    { title: "Koko Eating Bananas", difficulty: "Hard" },
    { title: "Minimum days to make M bouquets", difficulty: "Hard" },

    { title: "Find the smallest Divisor", difficulty: "Easy" },
    { title: "Capacity to Ship Packages within D Days", difficulty: "Hard" },
    { title: "Kth Missing Positive Number", difficulty: "Easy" },
    { title: "Aggressive Cows", difficulty: "Hard" },
    { title: "Book Allocation Problem", difficulty: "Hard" },
    { title: "Split array - Largest Sum", difficulty: "Hard" },
    { title: "Painter's partition", difficulty: "Hard" },

    { title: "Minimize Max Distance to Gas Station", difficulty: "Hard" },
    { title: "Median of 2 sorted arrays", difficulty: "Hard" },
    { title: "Kth element of 2 sorted arrays", difficulty: "Medium" },
    { title: "Find the row with maximum number of 1's", difficulty: "Easy" },
    { title: "Search in a 2 D matrix", difficulty: "Medium" },

    { title: "Search in a row and column wise sorted matrix", difficulty: "Medium" },
    { title: "Find Peak Element (2D Matrix)", difficulty: "Hard" },
    { title: "Matrix Median", difficulty: "Hard" },
  ],
  Arrays: [
    { title: "Largest Element in an Array", difficulty: "Easy" },
    { title: "Second Largest Element in an Array without sorting", difficulty: "Easy" },
    { title: "Check if the array is sorted", difficulty: "Easy" },
    { title: "Remove duplicates from Sorted array", difficulty: "Easy" },
    { title: "Left Rotate an array by one place", difficulty: "Easy" },
    { title: "Left rotate an array by D places", difficulty: "Easy" },
    { title: "Move Zeros to end", difficulty: "Easy" },
    { title: "Linear Search", difficulty: "Easy" },
    { title: "Find the Union", difficulty: "Medium" },
    { title: "Find missing number in an array", difficulty: "Easy" },
    { title: "Maximum Consecutive Ones", difficulty: "Easy" },
    { title: "Find the number that appears once, and other numbers twice", difficulty: "Medium" },
    { title: "Longest subarray with given sum K(positives)", difficulty: "Medium" },
    { title: "Longest subarray with sum K (Positives + Negatives)", difficulty: "Medium" },
    { title: "2Sum Problem", difficulty: "Medium" },
    { title: "Sort an array of 0’s 1’s and 2’s", difficulty: "Medium" },
    { title: "Majority Element (n/2 times)", difficulty: "Easy" },
    { title: "Kadane’s Algorithm, maximum subarray sum", difficulty: "Easy" },
    { title: "Print subarray with maximum subarray sum (extended version of above problem)", difficulty: "Medium" },
    { title: "Stock Buy and Sell", difficulty: "Easy" },
    { title: "Rearrange the array in alternating positive and negative items", difficulty: "Medium" },
    { title: "Next Permutation", difficulty: "Medium" },
    { title: "Leaders in an Array problem", difficulty: "Medium" },
    { title: "Longest Consecutive Sequence in an Array", difficulty: "Medium" },
    { title: "Set Matrix Zeros", difficulty: "Medium" },
    { title: "Rotate Matrix by 90 degrees", difficulty: "Medium" },
    { title: "Print the matrix in spiral manner", difficulty: "Medium" },
    { title: "Count subarrays with given sum", difficulty: "Easy" },

    { title: "Pascal’s Triangle", difficulty: "Medium" },
    { title: "Majority Element (>n/3 times)", difficulty: "Medium" },
    { title: "3-Sum Problem", difficulty: "Medium" },
    { title: "4-Sum Problem", difficulty: "Hard" },
    { title: "Largest Subarray with 0 Sum", difficulty: "Medium" },
    { title: "Count number of subarrays with given xor K", difficulty: "Hard" },
    { title: "Merge Overlapping Subintervals", difficulty: "Hard" },
    { title: "Merge two sorted arrays without extra space", difficulty: "Hard" },
    { title: "Find the repeating and missing number", difficulty: "Hard" },
    { title: "Count Inversions", difficulty: "Hard" },
    { title: "Reverse Pairs", difficulty: "Hard" },
    { title: "Maximum Product Subarray", difficulty: "Easy" },
  ],
  Sorting: [
    { title: "Merge Sort", difficulty: "Medium" },
    { title: "Recursive Bubble Sort", difficulty: "Easy" },
    { title: "Recursive Insertion Sort", difficulty: "Easy" },
    { title: "Quick Sort", difficulty: "Easy" },
    { title: "Selection Sort", difficulty: "Easy" },
    { title: "Bubble Sort", difficulty: "Easy" },
    { title: "Insertion Sort", difficulty: "Easy" },
  ],
  Basics: [
    { title: "Count Digits", difficulty: "Easy" },
    { title: "Reverse a Number", difficulty: "Easy" },
    { title: "Check Palindrome", difficulty: "Easy" },
    { title: "GCD Or HCF", difficulty: "Easy" },
    { title: "Armstrong Numbers", difficulty: "Easy" },
    { title: "Print all Divisors", difficulty: "Easy" },
    { title: "Check for Prime", difficulty: "Easy" },

    { title: "Understand recursion by print something N times", difficulty: "Easy" },
    { title: "Print name N times using recursion", difficulty: "Easy" },
    { title: "Print 1 to N using recursion", difficulty: "Easy" },
    { title: "Print N to 1 using recursion", difficulty: "Easy" },
    { title: "Sum of first N numbers", difficulty: "Easy" },
    { title: "Factorial of N numbers", difficulty: "Easy" },
    { title: "Reverse an array", difficulty: "Easy" },
    { title: "Check if a string is palindrome or not", difficulty: "Medium" },
    { title: "Fibonacci Number", difficulty: "Easy" },

    { title: "Hashing Theory", difficulty: "Medium" },
    { title: "Counting frequencies of array elements", difficulty: "Easy" },
    { title: "Find the highest/lowest frequency elements", difficulty: "Medium" },
  ],
};

üß† AI Agent Prompt: Intelligent Goal Tracking, Performance Forecasting & Adaptive Learning Engine

Objective:
Design and implement an offline-capable intelligent AI agent for a React Native (Expo) app that acts as a dynamic goal tracker, performance analyst, learning pace forecaster, and revision recommender. The app is focused on educational content, including DSA problems, core CS subjects like OS and DBMS, system design questions, and personal goal-setting with progress visualization via Gradial charts Eg: (currentValue , TargetValue ) and different indicators, Live Cards showing many things like current progress , performance , learning pace , revision recommendations etc and many things
üß© Core Capabilities & Responsibilities of the Agent

1. Activity Monitoring & Goal Assessment

The agent should operate locally on-device, continuously monitoring user activity across the app. It must analyze:

- Time spent on specific modules (e.g., DSA vs OS)
- Task completions, frequency, and skipped days
- User interaction patterns (time of day, session length, engagement trends)

It should use this data to assess whether the user is consistently meeting their targets, identify fluctuations in pace, and detect signs of burnout, fatigue, or overperformance.

2. Dynamic Goal Setting and Adjustment

Goals evolve weekly; daily targets are adaptive, not fixed.

- Calculate an adaptive daily target using weighted factors like recent performance, average pace, engagement window, and capacity.
- Increase/decrease workload based on momentum or fatigue.
- Adjust daily goals automatically and notify the user.
- Factor in the complexity of tasks (e.g., solving a system design question vs revising DBMS notes).

3. Personalized Learning Forecast & Prediction

The agent should forecast learning trajectories. This includes:

- Predicting future productivity (e.g., how many tasks can be achieved this week , how many days to meet the final goal(not static)
- Estimating time to complete newly added goals
- Identifying periods of high/low activity using past trend modeling
- Making suggestions on when to intensify or ease off based on forecasted performance and historic patterns

This can be achieved through time series analysis (sliding window averages, exponential smoothing) or basic ML models if embedded offline.

4. Revision Scheduling & Knowledge Decay Management

The agent must incorporate a knowledge decay model. Based on principles like the Ebbinghaus forgetting curve, it should:

- Track when a concept or problem was first learned or practiced
- Schedule intelligent revisions at spaced intervals (e.g., after 3 days, 1 week, 1 month)
- Prioritize revision for concepts/topics that haven‚Äôt been revisited in a long time
- Recommend re-practice for tasks where user took too long or struggled

This makes learning more retentive, not just task-driven.

5. Progress Visualization & Feedback Loop

The agent should update all visual analytics (charts) based on its findings:

- Daily/weekly target charts (adjusted dynamically)
- Topic-wise mastery distribution
- Pacing graphs (actual vs forecasted)
- Streaks, consistency heatmaps, burnout warnings

It should also push brief daily feedback summaries like:

> ‚ÄúYou completed 80% of your adaptive target today. Good consistency! Tomorrow‚Äôs target has been slightly increased based on your recent streak.‚Äù
Or:
> ‚ÄúYou missed revision for DBMS. Consider revisiting ER Models and Indexing Concepts today.‚Äù

6. Offline Background Operation

This AI agent must run completely offline, functioning autonomously without internet or cloud interaction. It should:

- Stay alive in background mode, even when the app is killed.Periodically (e.g., every X hours or based on data event triggers): Run evaluation logic and Schedule adaptive local notifications
- Schedule local notifications for daily goals, overdue tasks, or revision prompts
- Store and analyze data locally ( AsyncStorage)
- Degrade gracefully under low storage/memory environments
- Notifications are not fixed-time; they are intelligently timed based on:
    - Missed goals
    - Revision decay urgency
    - Detected user learning windows (e.g., you learn best in the evening)
    - Burnout patterns (e.g., long sessions ‚Üí ‚Äútake a break‚Äù nudge)
- It must also avoid excessive CPU/battery usage by running in optimized intervals.

---
üì¶ Technical Considerations

üóÉÔ∏è Data Storage
 - Use Zustand (already in use) for real-time UI data sync.
 - Use SQLite (expo-sqlite) to persist temporal data and logs:
    - Task activity logs (problemId, topicId, timestamp, duration, status)
    - Revision schedule with decay model
    -Background model states and last evaluations

‚è±Ô∏è Smart Scheduler (Offline-First)
- Use expo-task-manager with expo-background-fetch to simulate background jobs.
- AI model should re-run:
    - At interval (every few hours)
    - On certain triggers (e.g., inactivity spike, app usage spike)
- If long inactivity is detected, trigger a ‚Äúcomeback plan‚Äù with lighter auto-set goals.

üîî Notifications
- Use expo-notifications to:
    - Schedule adaptive goal changes
    - Send revision alerts based on spaced repetition urgency
    - Throw behavior-based nudges like:
        - ‚ÄúYou‚Äôve been solving back-to-back for 1.5 hours. Take a 15-min break!‚Äù
- Notifications must still be sent when app is fully closed, relying on expo-notifications + expo-background-fetch + expo-task-manager.

üß† Adaptation Algorithm
- Use sliding window average (Eg : 3‚Äì5 day task completion window)
- Use exponential smoothing to detect upward/downward trends
- Apply conditional rules ( Eg ):
    - If activity dropped for 2 days ‚Üí reduce goal by 20%
    - If consistent spike for 3+ days ‚Üí increase goal gently

üìà Prediction & Trend Module: Use lightweight linear regression or heuristic trend extrapolation for weekly forecasting.Eg:User energy patterns , Completion likelihood on Time , Burnout probability

üîÅ Revision Engine: Based on spaced repetition intervals, decay scoring, and topic usage frequency.
---

üîê Smart Features (also have to be implemented

Fatigue Detection: If user consistently overshoots target, recommend cooldown days.
Challenge Recommendation: If user finishes early, suggest additional bonus tasks from weak areas.
Inactivity Detection: If user misses multiple days, suggest a comeback plan with lighter load.
Micro-goals: Break large goals into sub-units and dynamically reassign when user skips a day.
Behavioral Insights: Highlight patterns like ‚ÄúYou focus better in the evening‚Äù or ‚ÄúMost consistent on weekends‚Äù.
---
üõ†Ô∏è Implementation Guide: Steps, Directory, Libraries, and Error Handling
- Steps: Define clear steps for each feature, including user interactions and system responses.
- Directory: Organize code into logical directories based on feature or functionality.
- Libraries: Utilize relevant libraries for data analysis, machine learning, and user interface components.
- Error Handling: Implement robust error handling mechanisms to ensure smooth operation and user experience.

Response structure
- Before coding this, you have to give a brief overview of the implementation(working,dir structure , example walkthrough) so that i can get clear understanding what is your idea.
- If i approve this , then you will be start implementing in 4 phases and each phase will be first tested and then proceed to next phase
- also tell what changes need to be made in my useAppStore schema in implementing the new tracking system

My current schema
- have currently 4 routes /dsa , /core , /interview , /systemDesign , /home
- currently using useStore.ts hook for managing data for whole app
// ---------- Shared Types ----------
type ContentElement =
  | { type: "paragraph"; value: string }
  | { type: "code"; value: string; language?: string }
  | { type: "image"; value: string; alt?: string };

type Difficulty = "easy" | "medium" | "hard";

// ---------- DSA ----------
type DsaTopic = {
  id: string;
  title: string;
  subtitle: string;
};

type Problem = {
  id: string;
  topicId: string;
  title: string;
  explanation: string;
  problemLink?: string;
  difficultyLevel: Difficulty;
  testCase: string;
  solution: string;
  code: string;
  similarProblems?: {
    title: string;
    description: string;
    shortExplanation: string | string[];
    difficultyLevel: Difficulty;
    code?: string;
  }[];
};

// ---------- Core & System Design ----------
type Category = {
  id: string;
  name: string;
  description?: string;
};

type Topic = {
  id: string;
  categoryId: string;
  name: string;
  description?: string;
};

type Subtopic = {
  id: string;
  topicId: string;
  title: string;
  content: ContentElement[];
};

// ---------- Interview ----------
type InterviewQuestion = {
  id: string;
  question: string;
  answer: ContentElement[];
};

// ---------- AppState ----------
type AppState = {
  dsa: {
    topics: DsaTopic[];
    problems: Problem[];
  };
  core: {
    categories: Category[];
    topics: Topic[];
    subtopics: Subtopic[];
  };
  interview: {
    questions: InterviewQuestion[];
  };
  systemDesign: {
    categories: Category[];
    topics: Topic[];
    subtopics: Subtopic[];
  };
};

// ---------- AppActions ----------
type AppActions = {
  // Generic Helpers
  add<T>(section: keyof AppState, item: any): void;
  update<T>(section: keyof AppState, item: any): void;
  delete<T>(section: keyof AppState, id: string): void;

  // Specific Getters
  getDsaTopicById(id: string): DsaTopic | undefined;
  getProblemById(id: string): Problem | undefined;
  getDsaProblemsByTopicId(topicId: string): Problem[];

  getCoreCategoryById(id: string): Category | undefined;
  getCoreTopicById(id: string): Topic | undefined;
  getCoreTopicsByCategoryId(categoryId: string): Topic[];
  getCoreSubtopicsByTopicId(topicId: string): Subtopic[];
  getCoreSubtopicById(id: string): Subtopic | undefined;

  getInterviewQuestionById(id: string): InterviewQuestion | undefined;

  getSystemDesignCategoryById(id: string): Category | undefined;
  getSystemDesignTopicsByCategoryId(categoryId: string): Topic[];
  getSystemDesignTopicById(id: string): Topic | undefined;
  getSystemDesignSubtopicsByTopicId(topicId: string): Subtopic[];
  getSystemDesignSubtopicById(id: string): Subtopic | undefined;

  clearAllData(): void;
  importData(data: AppState): void;
};

// ---------- Final Store Type ----------
type AppStore = AppState & AppActions;

üìù Example User Flow (Daily Cycle)

1. User opens app ‚Üí agent checks history ‚Üí updates today‚Äôs dynamic target
2. Based on trends, agent schedules a notification:
‚ÄúTarget: 3 DSA + 1 System Design Qn‚Äù
3. At end of day, agent logs progress, updates streaks, and forecasts next day.
4. If DBMS hasn't been touched in 14 days ‚Üí agent schedules revision
5. Charts reflect updated pacing and projected completion trends

üìâ Example User Flow: Auto Chart Update
Yesterday, user missed all Core subtopic goals.
Today, opens app and starts fresh.
Agent runs immediately on resume:
Reduces goal in "Core" ring from 5 to 2
Increases DSA ring goal slightly due to past overperformance

üì≤ Example User Flow: Adaptive Notification
User opens app, solves 2 DSA problems.
Agent detects strong momentum.
App is closed. After 2 hours, agent runs in background:
Notices high energy window around this time historically
Also notes DBMS revision is overdue
Sends this notification : complete your today target

------------------------------------------------------ Schema Design -----------------------------------------------------------------

// ---------- Reusable Content ----------
type ContentElement =
  | { type: "paragraph"; value: string }
  | { type: "code"; value: string; language?: string }
  | { type: "image"; value: string; alt?: string };


type SimilarProblem = {
  title: string;
  description: string;
  shortExplanation: string | string[];
  difficultyLevel: "easy" | "medium" | "hard";
  code?: string;
};

type DsaTopic = {
  id: string;
  title: string;
  subtitle: string;
};

type Problem = {
  id: string;
  topicId: string;
  title: string;
  explanation: string;
  problemLink?: string;
  difficultyLevel: "easy" | "medium" | "hard";
  testCase: string;
  solution: string;
  code: string;
  similarProblems?: SimilarProblem[];
};

// ---------- Core ----------
type CoreCategory = {
  id: string;
  name: string;
  description?: string;
};

type CoreTopic = {
  id: string;
  categoryId: string;
  name: string;
  description?: string;
};

type CoreSubtopic = {
  id: string;
  topicId: string;
  title: string;
  content: ContentElement[];
};

// ---------- Interview ----------
type InterviewQuestion = {
  id: string;
  question: string;
  answer: ContentElement[];
};

// ---------- System Design ----------
type SystemDesignCategory = {
  id: string;
  name: string;
  description?: string;
};

type SystemDesignTopic = {
  id: string;
  categoryId: string;
  name: string;
  description?: string;
};

type SystemDesignSubtopic = {
  id: string;
  topicId: string;
  title: string;
  content: ContentElement[];
};

// ---------- Global App State ----------
type AppState = {
  dsa: {
    topics: DsaTopic[];
    problems: Problem[];
  };
  core: {
    categories: CoreCategory[];
    topics: CoreTopic[];
    subtopics: CoreSubtopic[];
  };
  interview: {
    questions: InterviewQuestion[];
  };
  systemDesign: {
    categories: SystemDesignCategory[];
    topics: SystemDesignTopic[];
    subtopics: SystemDesignSubtopic[];
  };
};

// ---------- App Store Actions ----------
type AppActions = {
  // DSA Topic
  addDsaTopic: (topic: DsaTopic) => void;
  deleteDsaTopic: (id: string) => void;
  updateDsaTopic: (updated: DsaTopic) => void;
  getDsaTopicById: (id: string) => DsaTopic | undefined;

  // DSA Problems
  addProblem: (problem: Problem) => void;
  deleteProblem: (id: string) => void;
  updateProblem: (updated: Problem) => void;
  getProblemById: (problemId: string) => Problem | undefined;
  getDsaProblemsByTopicId: (topicId: string) => Problem[];

  // Core Category
  addCoreCategory: (category: CoreCategory) => void;
  deleteCoreCategory: (id: string) => void;
  updateCoreCategory: (updated: CoreCategory) => void;
  getCoreCategoryById: (id: string) => CoreCategory | undefined;

  // Core Topic
  addCoreTopic: (topic: CoreTopic) => void;
  deleteCoreTopic: (id: string) => void;
  updateCoreTopic: (updated: CoreTopic) => void;
  getCoreTopicsByCategoryId: (categoryId: string) => CoreTopic[];
  getCoreTopicById: (id: string) => CoreTopic | undefined;

  // Core Subtopic
  addCoreSubtopic: (subtopic: CoreSubtopic) => void;
  deleteCoreSubtopic: (id: string) => void;
  updateCoreSubtopic: (updated: CoreSubtopic) => void;
  getCoreSubtopicsByTopicId: (topicId: string) => CoreSubtopic[];
  getCoreSubtopicById: (id: string) => CoreSubtopic | undefined;

  // Interview
  addInterviewQuestion: (question: InterviewQuestion) => void;
  deleteInterviewQuestion: (id: string) => void;
  updateInterviewQuestion: (updated: InterviewQuestion) => void;
  getInterviewQuestionById: (id: string) => InterviewQuestion | undefined;

  // System Design Category
  addSystemDesignCategory: (category: SystemDesignCategory) => void;
  deleteSystemDesignCategory: (id: string) => void;
  updateSystemDesignCategory: (updated: SystemDesignCategory) => void;
  getSystemDesignCategoryById: (id: string) => SystemDesignCategory | undefined;

  // System Design Topic
  addSystemDesignTopic: (topic: SystemDesignTopic) => void;
  deleteSystemDesignTopic: (id: string) => void;
  updateSystemDesignTopic: (updated: SystemDesignTopic) => void;
  getSystemDesignTopicsByCategoryId: (categoryId: string) => SystemDesignTopic[];
  getSystemDesignTopicById: (id: string) => SystemDesignTopic | undefined;

  // System Design Subtopic
  addSystemDesignSubtopic: (subtopic: SystemDesignSubtopic) => void;
  deleteSystemDesignSubtopic: (id: string) => void;
  updateSystemDesignSubtopic: (updated: SystemDesignSubtopic) => void;
  getSystemDesignSubtopicsByTopicId: (topicId: string) => SystemDesignSubtopic[];
  getSystemDesignSubtopicById: (id: string) => SystemDesignSubtopic | undefined;

  // Global
  clearAllData: () => void;
  importData: (data: AppState) => void;
};

// ---------- Final Store Type ----------
type AppStore = AppState & AppActions;









/// agent

Yes ‚Äî now I clearly and fully understand what you're building. You're not just creating a daily planner or a stats tracker. You're designing a fully autonomous AI-powered learning engine that:

üö® CORE PRINCIPLE:
‚ÄúI (the user) will NEVER manage the system. I will only study. Everything else ‚Äî planning, adapting, updating, deleting, adjusting ‚Äî is 100% the job of the algorithm.‚Äù

You only control:

mode: normal / boost / light

preferredDailyLoad: e.g. 3 tasks/day

revisionIntensity: e.g. 20%

The rest is purely algorithmic intelligence.

‚úÖ SYSTEM GOALS (As Per You)
1. üéØ Auto-Create Daily Goals (for next 7 days)
Based on your historical speed, mood patterns, consistency, burnout chances, and domain progress

Ensures that goals stay aligned with overall data completion

2. ‚è∞ Auto-Schedule Learning Tasks Hour by Hour
Predicts best time slots based on your actual habits (TimePatternMemory)

Adjusts if you tend to shift things late, take longer, or rush

3. üîÅ Auto-Rearrange & Adjust Plans Continuously
If today you perform poorly ‚Üí rebalances rest of the 6 days

If you overperform ‚Üí advances harder topics sooner

Missed tasks automatically roll over (not your concern)

4. üß† Auto-Learn Your Behavior & Preferences
Collects invisible stats: best hours, weak domains, when you skip, your tolerance

Adapts to you ‚Äî like iPhone‚Äôs battery management or Tesla‚Äôs auto-drive

5. üìä Auto-Update All Stats and Forecasts Hourly
System doesn‚Äôt wait for "end of day"

It learns in near real-time ‚Äî and adjusts future schedules and forecasts constantly

6. üéì Auto-Focus on Completion of Entire Curriculum
It knows how much total data is available in DSA, Core, etc.

It monitors how much you've covered ‚Äî and aims to finish everything eventually

No need to set manual targets ‚Äî the engine builds the timeline itself

üß† ANALOGY TO UNDERSTAND THIS SYSTEM
This is NOT a "planner app".
This is closer to:

‚ÄúA digital learning coach that lives in your phone, studies you silently, and crafts the perfect study path ‚Äî without ever bothering you.‚Äù

You simply follow what it says, and it handles the rest.

‚öôÔ∏è KEY ENGINE RESPONSIBILITIES
Engine Task	Description
generateNext7Days()	Creates DailyGoals + Schedules based on everything it knows
hourlySync()	Every hour, even if app isn‚Äôt opened, updates stats, forecasts, task status
detectDeviation()	Sees if user didn‚Äôt follow schedule, and logs reason
autoRestructure()	Adjusts future goals and time allocations based on patterns
trackLearningPatterns()	Learns what domains you struggle in, what time you thrive
trackCompletionRate()	Learns your average load tolerance and uses it to adjust difficulty
forecastETA()	Updates how long it'll take you to finish DSA/Core/etc
digestGenerator()	Creates daily/weekly/monthly reports to help future planning
modeAdjuster()	Reacts to behavior ‚Äî shifts mode to recovery, low-load, etc if needed

üöÄ EXAMPLE ‚Äî A FULL WEEK (AUTONOMOUS MODE)
Day	What You Do	What Engine Does
Mon	Open app at 10:15 AM ‚Üí study 2/4 tasks	Logs real-time completion, updates streak, shifts pending 2 tasks forward
Tue	Don‚Äôt open the app at all	Logs a missed day, rolls over tasks, slightly lowers next day‚Äôs load
Wed	Open at 2 PM ‚Üí study 5 tasks (bonus)	Logs bonus performance, increases confidence in high-load handling
Thu	Reschedule task from 9 AM to 4 PM	Learns that mornings are bad; avoids morning tasks in future
Fri	Study 3/3 on time	Logs perfect day ‚Üí increases forecast accuracy
Sat	App not opened	Logged as skipped, revision load carried to Monday
Sun	Open at 5 PM, complete revision + 1 bonus	Updates revision stats, improves your preferred time window to 4‚Äì6 PM

By Sunday night:

üß† Your GoalMemory, TimePatternMemory, Forecast, and Metrics have evolved

üéØ System quietly regenerates DailyGoals + Schedules for next 7 days

üìä Updated GoalDigest shows insights (optional UI)

‚úÖ YOU NEVER DO THESE
What You Don't Do	Why
Set goals manually	Engine already planned next 7 days
Track your revision dates	Engine calculates and inserts revision tasks
Reschedule plans daily	Engine detects and adjusts automatically
Count stats or streaks	Engine handles GoalDigest, Forecast, Metrics
Plan how much to learn	You just tweak preferredDailyLoad or mode

üß™ FUTURE EXTENSIONS POSSIBLE
ü§ñ Add ML models to optimize schedules across months

üß¨ Personal learning DNA generation (based on your behavior)

üì≤ Notifications like ‚ÄúFeeling strong today? Want to switch to boost mode?‚Äù

‚úÖ FINAL NOTE
This is the smartest kind of personal learning system possible:

You learn ‚Üí it observes ‚Üí it evolves ‚Üí it plans ‚Üí repeat.







Now that we‚Äôve finalized the autonomous intelligence system, we can:

Start implementing goal generation code

Design adaptive UI dashboards

Connect hourly trackers (even in background)

Would you like to start implementing generateNext7Days() function first?
plan

‚úÖ FINAL PLAN: Smart Daily Goal + Forecasting Engine
We‚Äôll break the implementation into 8 focused modules that work together to make your app fully autonomous, smart, and adaptive ‚Äî with no manual effort from you.

üîÅ PHASE 1: DAILY GOAL ENGINE (foundation)
1. generateNext7DaysGoals()
üì• Input: current user config, available content, past performance

üß† Logic: picks what you should learn + revise for the next 7 days

üì§ Output: array of DailyGoal objects (fully structured)

‚úÖ Outcome: Fully auto-generated 7-day plan

2. updateTodayGoalProgress()
Triggers every hour or when app is opened

Tracks:

% completed

if you're behind

what was carried over

if today‚Äôs goal needs adjusting

‚úÖ Outcome: Keeps today‚Äôs goal live and accurate

3. recordGoalHistoryLog()
Logs what actions were completed/skipped with:

startedAt, completedAt, time spent, etc.

Updates hourly stats + reschedule logs if needed

‚úÖ Outcome: Ensures history is accurate for analytics and patterns

üîÅ PHASE 2: USER CONFIG & BEHAVIOR MODEL
4. GoalMemoryManager
Builds your GoalMemory by observing:

Time of day you learn

Whether you quit early

How you behave on weekends or long days

‚úÖ Outcome: Algo learns your personality

5. TimePatternTracker
Tracks when you study (e.g. 9:15am ‚Äì 10:00am)

Builds TimePatternMemory:

Preferred slots

Success rate by time block

How long you take

‚úÖ Outcome: Helps in scheduling smarter day plans

6. ScheduledPlanGenerator
Generates a recommended schedule for a day

E.g. ‚ÄúDo DSA problem at 10:15‚Äì11:00‚Äù, ‚ÄúRevise core at 5pm‚Äù

Auto-updates on missed or completed actions

‚úÖ Outcome: Smart, auto-adjusting daily schedule ‚Äî but user can ignore if they want

üîÅ PHASE 3: FORECAST & ADAPTATION
7. GoalForecastEngine
Estimates:

When you'll finish all your DSA, core, interview, SD content

Based on:

Your speed, missed days, load, and streaks

Also updates GoalEngineMetrics

‚úÖ Outcome: Motivating visual + realistic expectations

8. RescheduleOptimizer
Reacts when you:

Fall behind

Miss tasks

Take longer than usual

Can reschedule future goals, carry over, or simplify next day

‚úÖ Outcome: Keeps the plan alive and manageable ‚Äî even if you mess up

BONUS (Later):
üîç AnalyzeWeekDigest()
Aggregates weekly trends like:

Top topic

Missed rates

Mood logs

Motivation drops

Helps ML models and future features

‚úÖ Outcome: Long-term learning summary & insights

üì¶ OUTPUT DATA WE‚ÄôLL MAINTAIN:
Module	Output
generateNext7DaysGoals()	DailyGoal[]
updateTodayGoalProgress()	DailyGoal (live update)
recordGoalHistoryLog()	GoalHistoryLog[]
GoalMemoryManager	GoalMemory
TimePatternTracker	TimePatternMemory
ScheduledPlanGenerator	ScheduledPlan[]
GoalForecastEngine	GoalForecast + GoalEngineMetrics
RescheduleOptimizer	Updated future goals

üõ† IMPLEMENTATION ORDER
We‚Äôll build in this order:

‚úÖ PHASE 1
[üîπ] generateNext7DaysGoals() ‚Üê Start here

 updateTodayGoalProgress()

 recordGoalHistoryLog()

üîú PHASE 2
 GoalMemoryManager

 TimePatternTracker

 ScheduledPlanGenerator

üîú PHASE 3
 GoalForecastEngine

 RescheduleOptimizer

üü¢ Shall We Begin?
If you're happy with this breakdown:

We'll begin with generateNext7DaysGoals(), which is non-destructive, pure, and uses existing data.

Would you like a preview of how it will work before we code it? Or shall we jump to writing that function?
